-- (1)직원의 이름과 직원의 직무 변경 기록에서 JOB_ID를 표시, 직무 변경이 없는 경우 'No Charge'로 표시
SELECT E.NAME "직원 이름", 
CASE
    WHEN J.JOB_ID IS NULL THEN 'No Charge'
    ELSE J.JOB_ID
END "직무 변경 기록"
FROM EMPLOYEES E
LEFT OUTER JOIN JOB_HISTORY J
    ON E.EMPLOYEE_ID = J.EMPLOYEE_ID;

-- (2)직원 이름에 "Employee 1"이라는 문자열이 포함된 데이터를 조회 (급여가 NULL인 경우 0으로)
--    소속 부서 이름도 함께 출력, 부서 이름 순으로 출력
SELECT E.NAME "직원 이름", D.DEPARTMENT_NAME "부서명", NVL(E.SALARY, 0) 급여
FROM EMPLOYEES E
LEFT OUTER JOIN DEPARTMENTS D
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE E.NAME LIKE '%Employee 1%'
ORDER BY D.DEPARTMENT_NAME;

-- (3)최근 6개월 동안 발생한 거래의 계좌 ID와 거래 금액, 거래일, 고객 ID, 고객명을 조회하세요
SELECT  T.TRANSACTION_ID "거래 계좌 ID",
        T.AMOUNT "거래 금액",
        TO_CHAR(T.TRANSACTION_DATE, 'YYYY-MM-DD HH:MI:SS') 거래일,
        C.CUSTOMER_ID "고객 ID",
        C.NAME "고객명"
FROM TRANSACTIONS T
LEFT OUTER JOIN ACCOUNTS A
    ON T.ACCOUNT_ID = A.ACCOUNT_ID
LEFT OUTER JOIN CUSTOMERS C
    ON A.CUSTOMER_ID = C.CUSTOMER_ID
WHERE MONTHS_BETWEEN(T.TRANSACTION_DATE, SYSDATE) <= 6;

-- (4)3, 4, 5, 6 부서에 속하는 직무별 직운 수 조회
SELECT E.JOB_ID, COUNT(*)
FROM DEPARTMENTS D
JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE D.DEPARTMENT_NAME IN ('Department 3', 'Department 4', 'Department 5', 'Department 6')
GROUP BY E.JOB_ID;

-- (5)계좌 유형별 평균 잔액을 소수점 둘째 자리까지 출력
SELECT ACCOUNT_TYPE "계좌 유형", TRUNC(AVG(BALANCE), 2) "평균 잔액"
FROM ACCOUNTS
GROUP BY ACCOUNT_TYPE;

-- (6)각 계좌의 거래 횟수를 오름차순으로 조회
SELECT A.ACCOUNT_ID 계좌, COUNT(T.TRANSACTION_ID) "거래 횟수"
FROM ACCOUNTS A
LEFT OUTER JOIN TRANSACTIONS T
    ON A.ACCOUNT_ID = T.ACCOUNT_ID
GROUP BY A.ACCOUNT_ID
ORDER BY COUNT(T.TRANSACTION_ID);

-- (7)2024/01/01 ~ 2025/12/31 사이에 발생한 총 거래 금액을 높은 순으로 정렬하고 상위 10명만 조회
SELECT * FROM (
    SELECT C.CUSTOMER_ID 고객명, SUM(T.AMOUNT) "총 거래 금액"
    FROM CUSTOMERS C
    LEFT OUTER JOIN ACCOUNTS A
        ON C.CUSTOMER_ID = A.CUSTOMER_ID
    LEFT OUTER JOIN TRANSACTIONS T
        ON A.ACCOUNT_ID = T.ACCOUNT_ID
    WHERE TRANSACTION_DATE >= '2024-01-01' AND TRANSACTION_DATE <= '2025-12-31'
    GROUP BY C.CUSTOMER_ID
    ORDER BY SUM(T.AMOUNT) DESC)
WHERE ROWNUM <= 10;

-- (8)급여 정보가 없는 직원의 이름과 부서 이름 조회
SELECT E.NAME 직원명, D.DEPARTMENT_NAME 부서명
FROM EMPLOYEES E
LEFT OUTER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.SALARY IS NULL;

-- (9)
SELECT * FROM (
    SELECT C.NAME 고객명, MAX(L.AMOUNT) "가장 높은 대출 금액"
    FROM CUSTOMERS C
    JOIN LOANS L
        ON C.CUSTOMER_ID = L.CUSTOMER_ID
    GROUP BY C.NAME
    ORDER BY MAX(L.AMOUNT) DESC)
WHERE ROWNUM <= 15
;

-- (10)부서별 급여 7000~15000 직원수 중 5명 이상인 부서만 많은 순으로 정렬
SELECT D.DEPARTMENT_NAME 부서명, COUNT(*) "직원 수"
FROM DEPARTMENTS D
LEFT OUTER JOIN EMPLOYEES E
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.SALARY BETWEEN 7000 AND 15000
GROUP BY D.DEPARTMENT_NAME
HAVING COUNT(*) >= 5
ORDER BY "직원 수" DESC;
